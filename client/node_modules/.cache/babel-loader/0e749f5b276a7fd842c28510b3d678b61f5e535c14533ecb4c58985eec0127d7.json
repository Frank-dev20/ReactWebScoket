{"ast":null,"code":"// import { createRoot } from 'react-dom/client';\n// import  { Component } from 'react';\n// import { w3cwebsocket } from 'websocket';\n// import { Card, Avatar, Input, Typography } from 'antd';\n// import './index.css';\n\n// const { Search } = Input;\n// const { Text } = Typography;\n// const { Meta } = Card;\n\n// const client = new w3cwebsocket('ws://localhost:9000');\n\n// export default class App extends Component {\n//     state = {\n//         userName: '',\n//         isLoggedIn: false,\n//         messages: []\n//     }\n\n//     onButtonClicked = (value) => {\n//         client.send(JSON.stringify({\n//             type: \"message\",\n//             msg: value,\n//             user: this.state.userName\n//         }));\n//         this.setState({ searchVal: '' });\n//     }\n\n//     componentDidMount() {\n//        client.onopen = () => {\n//             console.log('WebSocket Client Connected');\n//         };\n//         client.onmessage = (message) => {\n//             const dataFromServer = JSON.parse(message.data);\n//             console.log('got reply! ', dataFromServer);\n//             if (dataFromServer.type === \"message\") {\n//                 this.setState((state) => ({\n//                     messages: [...state.messages, \n//                     { \n//                         msg: dataFromServer.msg, \n//                         user: dataFromServer.user \n\n//                     }]\n//                 })\n//                 );\n//             }\n//         };\n//     } \n\n//     render() {\n//         return (\n//             <div className=\"main\" id='wrapper'>\n//             {this.state.isLoggedIn ?\n//             <div>\n//               <div className=\"title\">\n//                 <Text id=\"main-heading\" type=\"secondary\" style={{ fontSize: '36px' }}>Logged in as: {this.state.userName}</Text>\n//               </div>\n//               <div style={{ display: 'flex', flexDirection: 'column', paddingBottom: 50 }} id=\"messages\">\n//                 {this.state.messages.map(message => \n//                   <Card key={message.msg} style={{ width: 300, margin: '16px 4px 0 4px', alignSelf: this.state.userName === message.user ? 'flex-end' : 'flex-start' }} loading={false}>\n//                     <Meta\n//                       avatar={\n//                         <Avatar style={{ color: '#f56a00', backgroundColor: '#fde3cf' }}>{message.user[0].toUpperCase()}</Avatar>\n//                       }\n//                       title={message.user+\":\"}\n//                       description={message.msg}\n//                     />\n//                   </Card> \n//                 )}\n//               </div>\n//               <div className=\"bottom\">\n//                 <Search\n//                   placeholder=\"Enter your message\"\n//                   enterButton=\"Send\"\n//                   value={this.state.searchVal}\n//                   size=\"large\"\n//                   onChange={(e) => this.setState({ searchVal: e.target.value })}\n//                   onSearch={value => this.onButtonClicked(value)}\n//                 />\n//               </div> \n//             </div>\n//             :\n//             <div style={{ padding: '200px 40px' }}>\n//               <Search\n//                 placeholder=\"Enter Username\"\n//                 enterButton=\"Login\"\n//                 size=\"large\"\n//                 onSearch={value => this.setState({ isLoggedIn: true, userName: value })}\n//               />\n//             </div>\n//           }\n//           </div>\n//         )\n//     }\n// }\n// const rootElement = document.getElementById(\"root\");\n// const root = createRoot(rootElement);\n// root.render(<App />,);\n\n// //ReactDom.render(<App />, document.getElementById('root'));","map":{"version":3,"names":[],"sources":["C:/Users/USCHIP/Desktop/websocketChat/client/src/index.js"],"sourcesContent":["// import { createRoot } from 'react-dom/client';\r\n// import  { Component } from 'react';\r\n// import { w3cwebsocket } from 'websocket';\r\n// import { Card, Avatar, Input, Typography } from 'antd';\r\n// import './index.css';\r\n\r\n\r\n// const { Search } = Input;\r\n// const { Text } = Typography;\r\n// const { Meta } = Card;\r\n\r\n// const client = new w3cwebsocket('ws://localhost:9000');\r\n\r\n// export default class App extends Component {\r\n//     state = {\r\n//         userName: '',\r\n//         isLoggedIn: false,\r\n//         messages: []\r\n//     }\r\n\r\n\r\n//     onButtonClicked = (value) => {\r\n//         client.send(JSON.stringify({\r\n//             type: \"message\",\r\n//             msg: value,\r\n//             user: this.state.userName\r\n//         }));\r\n//         this.setState({ searchVal: '' });\r\n//     }\r\n    \r\n    \r\n//     componentDidMount() {\r\n//        client.onopen = () => {\r\n//             console.log('WebSocket Client Connected');\r\n//         };\r\n//         client.onmessage = (message) => {\r\n//             const dataFromServer = JSON.parse(message.data);\r\n//             console.log('got reply! ', dataFromServer);\r\n//             if (dataFromServer.type === \"message\") {\r\n//                 this.setState((state) => ({\r\n//                     messages: [...state.messages, \r\n//                     { \r\n//                         msg: dataFromServer.msg, \r\n//                         user: dataFromServer.user \r\n                    \r\n//                     }]\r\n//                 })\r\n//                 );\r\n//             }\r\n//         };\r\n//     } \r\n    \r\n//     render() {\r\n//         return (\r\n//             <div className=\"main\" id='wrapper'>\r\n//             {this.state.isLoggedIn ?\r\n//             <div>\r\n//               <div className=\"title\">\r\n//                 <Text id=\"main-heading\" type=\"secondary\" style={{ fontSize: '36px' }}>Logged in as: {this.state.userName}</Text>\r\n//               </div>\r\n//               <div style={{ display: 'flex', flexDirection: 'column', paddingBottom: 50 }} id=\"messages\">\r\n//                 {this.state.messages.map(message => \r\n//                   <Card key={message.msg} style={{ width: 300, margin: '16px 4px 0 4px', alignSelf: this.state.userName === message.user ? 'flex-end' : 'flex-start' }} loading={false}>\r\n//                     <Meta\r\n//                       avatar={\r\n//                         <Avatar style={{ color: '#f56a00', backgroundColor: '#fde3cf' }}>{message.user[0].toUpperCase()}</Avatar>\r\n//                       }\r\n//                       title={message.user+\":\"}\r\n//                       description={message.msg}\r\n//                     />\r\n//                   </Card> \r\n//                 )}\r\n//               </div>\r\n//               <div className=\"bottom\">\r\n//                 <Search\r\n//                   placeholder=\"Enter your message\"\r\n//                   enterButton=\"Send\"\r\n//                   value={this.state.searchVal}\r\n//                   size=\"large\"\r\n//                   onChange={(e) => this.setState({ searchVal: e.target.value })}\r\n//                   onSearch={value => this.onButtonClicked(value)}\r\n//                 />\r\n//               </div> \r\n//             </div>\r\n//             :\r\n//             <div style={{ padding: '200px 40px' }}>\r\n//               <Search\r\n//                 placeholder=\"Enter Username\"\r\n//                 enterButton=\"Login\"\r\n//                 size=\"large\"\r\n//                 onSearch={value => this.setState({ isLoggedIn: true, userName: value })}\r\n//               />\r\n//             </div>\r\n//           }\r\n//           </div>\r\n//         )\r\n//     }\r\n// }\r\n// const rootElement = document.getElementById(\"root\");\r\n// const root = createRoot(rootElement);\r\n// root.render(<App />,);\r\n\r\n// //ReactDom.render(<App />, document.getElementById('root'));"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}